// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String             @id @default(uuid())
  email         String             @unique
  fullName      String
  role          Role               @default(USER)
  createdAt     DateTime           @default(now())
  updatedAt     DateTime           @updatedAt
  profile       Profile?
  documents     Document[]
  uploads       Document[]         @relation("Uploads")
  bookmarks     Bookmark[]
  enrolledIn    Enrollment[]
  activities    ModeratorActivity[]
}

model Profile {
  id            String         @id @default(uuid())
  userId        String         @unique
  bio           String?
  avatar        String?
  user          User           @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Course {
  id            String         @id @default(uuid())
  title         String
  subject       String
  description   String
  documentCount Int            @default(0)
  rating        Float          @default(0)
  userCount     Int            @default(0)
  imageSrc      String?
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  documents     Document[]
  enrollments   Enrollment[]
}

model Document {
  id            String              @id @default(uuid())
  title         String
  type          DocumentType
  pages         Int
  status        ApprovalStatus      @default(PENDING)
  filePath      String
  courseId      String
  userId        String
  uploaderId    String
  createdAt     DateTime            @default(now())
  updatedAt     DateTime            @updatedAt
  downloads     Int                 @default(0)
  rating        Float?
  course        Course              @relation(fields: [courseId], references: [id])
  user          User                @relation(fields: [userId], references: [id])
  uploader      User                @relation("Uploads", fields: [uploaderId], references: [id])
  bookmarks     Bookmark[]
  moderatorActions ModeratorActivity[] @relation("DocumentActions")
}

model Bookmark {
  id            String         @id @default(uuid())
  userId        String
  documentId    String
  createdAt     DateTime       @default(now())
  user          User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  document      Document       @relation(fields: [documentId], references: [id], onDelete: Cascade)

  @@unique([userId, documentId])
}

model Enrollment {
  id            String         @id @default(uuid())
  userId        String
  courseId      String
  createdAt     DateTime       @default(now())
  user          User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  course        Course         @relation(fields: [courseId], references: [id], onDelete: Cascade)

  @@unique([userId, courseId])
}

model ModeratorActivity {
  id            String         @id @default(uuid())
  type          ActivityType
  documentTitle String
  documentId    String?
  moderatorId   String
  timestamp     DateTime       @default(now())
  moderator     User           @relation(fields: [moderatorId], references: [id])
  document      Document?      @relation("DocumentActions", fields: [documentId], references: [id])
}

enum Role {
  USER
  MODERATOR
  ADMIN
}

enum DocumentType {
  NOTES
  LAB_REPORT
  ESSAY
  STUDY_GUIDE
  PRACTICE_PROBLEMS
  OTHER
}

enum ApprovalStatus {
  PENDING
  APPROVED
  REJECTED
}

enum ActivityType {
  APPROVE
  REJECT
  NEW
}
